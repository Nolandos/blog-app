{"version":3,"sources":["components/layouts/PageContainer/PageContainer.js","components/layouts/MainMenu/MainMenu.js","components/common/Logo/Logo.js","components/features/NavBar/NavBar.js","components/layouts/MainLayout/MainLayout.js","components/common/PageTitle/PageTitle.js","config.js","redux/postsReducer.js","components/common/Button/Button.js","components/common/SmallTitle/SmallTitle.js","components/common/HtmlBox/HtmlBox.js","utils/cutText.js","components/common/Author/Author.js","components/features/PostSummary/PostSummary.js","components/features/PostsList/PostsList.js","components/common/Spinner/Spinner.js","components/common/Alert/Alert.js","components/common/Pagination/Pagination.js","components/features/Posts/Posts.js","components/pages/Home/Home.js","components/features/PostsCounter/PostsCounter.js","components/pages/Posts/Posts.js","utils/myHooks/useFormInput.js","components/common/TextField/TextField.js","components/features/ContactEmail/ContactEmail.js","components/pages/Contact/Contact.js","components/pages/NotFound/NotFound.js","components/common/PostForm/PostForm.js","components/features/NewPost/NewPost.js","components/pages/NewPost/NewPost.js","components/common/SinglePostForm/SinglePostForm.js","components/features/SinglePost/SinglePost.js","components/pages/SinglePost/SinglePost.js","components/features/EditPostForm/EditPostForm.js","components/pages/EditPost/EditPost.js","utils/getRandomInt.js","components/features/RandomPost/RandomPost.js","components/pages/RandomPost/RandomPost.js","App.js","redux/store.js","index.js"],"names":["PageContainer","children","className","MainMenu","links","location","map","link","index","key","pathname","path","to","title","withRouter","props","Logo","NavBar","useState","MainLayout","PageTitle","API_URL","process","BASE_URL","FACEBOOK_API_ID","createActionName","name","LOAD_POSTS","LOAD_SINGLE_POST","LOAD_RANDOM_POST","LOAD_POSTS_PAGE","START_REQUEST","END_REQUEST","ERROR_REQUEST","RESET_REQUEST","loadPostsByPage","payload","type","startRequest","endRequest","errorRequest","error","resetRequest","loadSinglePostRequest","id","dispatch","a","axios","get","res","data","message","loadPostsByPageRequest","page","PerPage","startAt","postsPerPage","limit","posts","amount","presentPage","initialState","request","pending","success","singlePost","randomPost","Button","variant","otherProps","SmallTitle","HtmlBox","ReactHtmlParser","cutText","text","maxLength","lastWord","substr","lastIndexOf","length","concat","Author","PostSummary","content","author","PostsList","post","Spinner","animationIn","animationOut","Alert","icon","Pagination","initialPage","setPage","pages","onPageChange","onClick","prevPage","getPrevPage","Array","el","newPage","nextPage","getNextPage","Posts","useDispatch","useSelector","Math","ceil","pagination","setPagination","useEffect","undefined","loadPostsPage","HomePage","PostsCounter","count","PostsPage","useFormInput","initialValue","value","setValue","onChange","e","target","TextField","label","ContactEmail","address","subject","onSubmit","preventDefault","email","console","log","response","sendEmailRequest","placeholder","ContactPage","NotFoundPage","PostForm","handleSubmit","postTitle","postAuthor","setContent","options","toolbar","buttons","NewPost","addPostRequest","NewPostPage","SinglePost","appId","href","match","params","SinglePostForm","SinglePostPage","EditPost","postID","fetchPost","patch","editPostRequest","EditPostPage","getRandomInt","min","max","floor","random","RandomPost","randomId","RandomPostPage","App","exact","component","Home","Contact","NotFound","allReducers","combineReducers","state","action","composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2929f306.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './PageContainer.scss';\r\n\r\nconst PageContainer = ({ children }) => (\r\n  <div className=\"container-fluid\">\r\n    {children}\r\n  </div>\r\n);\r\n\r\nPageContainer.propTypes = {\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default PageContainer;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\nimport { withRouter } from 'react-router-dom';\r\nimport './MainMenu.scss';\r\n\r\nconst MainMenu = ({ links, location }) => (\r\n  <ul className=\"main-menu\">\r\n    { links.map((link, index) =>\r\n      <li key={index}>\r\n        <Link className={(location.pathname === link.path && 'active') || ''} to={link.path}>{link.title}</Link>\r\n      </li>\r\n    )}\r\n  </ul>\r\n);\r\n\r\nMainMenu.propTypes = {\r\n  links: PropTypes.arrayOf(PropTypes.shape({\r\n    path: PropTypes.string.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n  })),\r\n};\r\n\r\nexport default withRouter(props => <MainMenu {...props}/>);\r\n","import React from 'react'\r\n\r\nimport './Logo.scss';\r\n\r\nconst Logo = ({ links, location }) => (\r\n  <h1 className=\"logo\">Blog.app</h1>\r\n);\r\n\r\nexport default Logo;\r\n","import React,{ useState } from 'react';\r\nimport './NavBar.scss';\r\n\r\nimport MainMenu from '../../layouts/MainMenu/MainMenu';\r\nimport Logo from '../../common/Logo/Logo'\r\n\r\nconst NavBar = () => {\r\n  const [links] = useState([\r\n    { path: '/', title: 'Home' },\r\n    { path: '/posts/new', title: 'Add post' },\r\n    { path: '/posts', title: 'Posts' },\r\n    { path: '/contact', title: 'Contact' },\r\n    { path: '/posts/randomPost', title: 'Random Post' }\r\n  ]);\r\n\r\n  return (\r\n    <nav className=\"navbar\">\r\n      <Logo />\r\n      <MainMenu links={ links } />\r\n    </nav>\r\n  )\r\n}\r\nexport default NavBar;","import React from 'react';\r\nimport PageContainer from '../PageContainer/PageContainer';\r\nimport NavBar from '../../features/NavBar/NavBar';\r\n\r\nconst MainLayout = ({ children }) => (\r\n  <div>\r\n    <PageContainer>\r\n      <NavBar />\r\n      { children }\r\n    </PageContainer>\r\n  </div>\r\n);\r\n\r\nexport default MainLayout;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './PageTitle.scss';\r\n\r\nconst PageTitle = ({ children }) => (\r\n  <h1 className=\"page-title\">\r\n     {children}\r\n  </h1>\r\n);\r\n\r\nPageTitle.propTypes = {\r\n  children: PropTypes.string,\r\n};\r\n\r\nexport default PageTitle;\r\n","export const API_URL = process.env.API_URL;\r\nexport const BASE_URL = process.env.BASE_URL;\r\nexport const FACEBOOK_API_ID = process.env.FACEBOOK_API_ID;","import axios from 'axios';\r\nimport { API_URL } from '../config';\r\n\r\n// ACTION NAME CREATOR\r\nconst reducerName = 'posts';\r\nconst createActionName = name => `app/${reducerName}/${name}`;\r\n\r\n//ACTION TYPES\r\nexport const LOAD_POSTS = createActionName('LOAD_POSTS');\r\nexport const LOAD_SINGLE_POST = createActionName('LOAD_SINGLE_POST');\r\nexport const LOAD_RANDOM_POST = createActionName('LOAD_RANDOM_POST');\r\nexport const LOAD_POSTS_PAGE = createActionName('LOAD_POSTS_PAGE');\r\nexport const START_REQUEST = createActionName('START_REQUEST');\r\nexport const END_REQUEST = createActionName('END_REQUEST');\r\nexport const ERROR_REQUEST = createActionName('ERROR_REQUEST');\r\nexport const RESET_REQUEST = createActionName('RESET_REQUEST');\r\n\r\n//ACTIONS\r\nexport const loadPosts = payload => ({ payload, type: LOAD_POSTS });\r\nexport const loadSinglePost = payload => ({payload, type: LOAD_SINGLE_POST });\r\nexport const loadRandomPost = payload => ({payload, type: LOAD_RANDOM_POST });\r\nexport const loadPostsByPage = payload => ({ payload, type: LOAD_POSTS_PAGE });\r\nexport const startRequest = () => ({ type: START_REQUEST });\r\nexport const endRequest = () => ({ type: END_REQUEST });\r\nexport const errorRequest = error => ({ error, type: ERROR_REQUEST });\r\nexport const resetRequest = () => ({ type: RESET_REQUEST });\r\n\r\n//THUNKS\r\nexport const loadPostsRequest = () => {\r\n    return async dispatch => {\r\n     dispatch(startRequest());\r\n\r\n      try {\r\n        let res = await axios.get(`${API_URL}/posts`);\r\n        dispatch(endRequest());\r\n        dispatch(loadPosts(res.data));  \r\n      } catch(e) {\r\n        dispatch(errorRequest(e.message));\r\n      }\r\n    };\r\n  };\r\n\r\nexport const loadSinglePostRequest = (id) => {\r\n  return async dispatch => {\r\n    dispatch(startRequest());\r\n\r\n    try {\r\n      let res = await axios.get(`${API_URL}/posts/${id}`);\r\n      await dispatch(loadSinglePost(res.data));  \r\n      dispatch(endRequest());\r\n    } catch(e) {\r\n      dispatch(errorRequest(e.message));\r\n    }\r\n  };\r\n};\r\n\r\nexport const addPostRequest = (post) => {\r\n  return async dispatch => {\r\n    dispatch(startRequest());\r\n\r\n    try {\r\n      let res = await axios.post(`${API_URL}/posts`, post);\r\n      dispatch(endRequest());\r\n    } catch(e) {\r\n      dispatch(errorRequest(e.message));\r\n    }\r\n  };\r\n};\r\n\r\nexport const editPostRequest = (post, id) => {\r\n  return async dispatch => {\r\n    dispatch(startRequest());\r\n\r\n    try {\r\n      let res = await axios.patch(`${API_URL}/posts/${id}`, post);\r\n      dispatch(endRequest());\r\n    } catch(e) {\r\n      dispatch(errorRequest(e.message));\r\n    }\r\n  };\r\n};\r\n\r\nexport const loadPostsByPageRequest = (page, PerPage) => {\r\n  return async dispatch => {\r\n\r\n    dispatch(startRequest());\r\n    try {\r\n\r\n      const postsPerPage = PerPage;\r\n\r\n      const startAt = (page - 1) * postsPerPage;\r\n      const limit = postsPerPage;\r\n\r\n      let res = await axios.get(`${API_URL}/posts/range/${startAt}/${limit}`);\r\n\r\n      const payload = {\r\n        posts: res.data.posts,\r\n        amount: res.data.amount,\r\n        postsPerPage,\r\n        presentPage: page,\r\n      };\r\n\r\n      dispatch(loadPostsByPage(payload));\r\n      dispatch(endRequest());\r\n\r\n    } catch(e) {\r\n      dispatch(errorRequest(e.message));\r\n    }\r\n\r\n  };\r\n};\r\n\r\nexport const getRandomPost = (id) => {\r\n  return async dispatch => {\r\n    dispatch(startRequest());\r\n\r\n    try {\r\n      let res = await axios.get(`${API_URL}/posts/random/${id}`);\r\n      await dispatch(loadRandomPost(res.data));\r\n\r\n      dispatch(endRequest());\r\n    } catch(e) {\r\n      dispatch(errorRequest(e.message));\r\n    }\r\n  };\r\n};\r\n\r\nexport const sendEmailRequest = (email) => {\r\n  return async dispatch => {\r\n    dispatch(startRequest());\r\n  \r\n    try {\r\n      let res = await axios.post(`${API_URL}/send`, email);\r\n      dispatch(endRequest());\r\n      console.log(res);\r\n    } catch(e) {\r\n      console.log({e})\r\n      console.log(e.response.data);\r\n      dispatch(errorRequest(e.response.data));\r\n    }\r\n\r\n  };\r\n};\r\n\r\n//INITIAL STATE\r\nconst initialState = {\r\n  data: [],\r\n  request: {\r\n    pending: false,\r\n    error: null,\r\n    success: null\r\n  },\r\n  singlePost: {},\r\n  randomPost: {},\r\n  amount: 0,\r\n  postsPerPage: 10,\r\n  presentPage: 1\r\n};\r\n\r\n//REDUCER\r\nexport default function ordersReducer(state = initialState, action = {}) {\r\n  switch (action.type) {\r\n    case LOAD_POSTS:\r\n        return  { ...state, data: action.payload };\r\n    case LOAD_SINGLE_POST:\r\n      return { ...state, singlePost: action.payload };\r\n    case LOAD_RANDOM_POST:\r\n      return { ...state, randomPost: action.payload };\r\n    case LOAD_POSTS_PAGE:\r\n      return {\r\n        ...state,\r\n        postsPerPage: action.payload.postsPerPage,\r\n        presentPage: action.payload.presentPage,\r\n        amount: action.payload.amount,\r\n        data: [...action.payload.posts],\r\n      };\r\n    case START_REQUEST:\r\n      return { ...state, request: { pending: true, error: null, success: null } };\r\n    case END_REQUEST:\r\n      return { ...state, request: { pending: false, error: null, success: true } };\r\n    case ERROR_REQUEST:\r\n      return { ...state, request: { pending: false, error: action.error, success: false } };\r\n    case RESET_REQUEST:\r\n      return { ...state, request: { pending: false, error: null, success: null } };\r\n    default:\r\n      return state;\r\n  }\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './Button.scss';\r\n\r\nconst Button = ({ variant = '', children, ...otherProps }) => (\r\n  <button { ...otherProps } className={ `button button--${variant}`}>\r\n    { children }\r\n  </button>\r\n);\r\n\r\nButton.propTypes = {\r\n  variant: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Button;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './SmallTitle.scss';\r\n\r\nconst SmallTitle = ({ children, ...otherProps }) => (\r\n  <h2 {...otherProps} className=\"small-title\">\r\n    { children }\r\n  </h2>\r\n);\r\n\r\nSmallTitle.propTypes = {\r\n  children: PropTypes.string,\r\n};\r\n\r\nexport default SmallTitle;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ReactHtmlParser from 'react-html-parser';\r\n\r\nconst HtmlBox = ({ children, ...otherProps }) => (\r\n  <p {...otherProps} className=\"html-box\">\r\n    {ReactHtmlParser(children)}\r\n  </p>\r\n);\r\n\r\nHtmlBox.propTypes = {\r\n  children: PropTypes.string,\r\n};\r\n\r\nexport default HtmlBox;","const cutText = (text, maxLength) => {\r\n    let lastWord = (text.substr(0, maxLength).lastIndexOf(' '));\r\n\r\n    if(maxLength < 1) return 'Error';\r\n    if (text.length > maxLength) return text.substr(0, lastWord).concat('...');\r\n    return text.substr(0, maxLength);  \r\n}\r\n\r\nexport default cutText;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './Author.scss';\r\n\r\nconst Author = ({ children }) => (\r\n    <p>\r\n    Author: { children }\r\n    </p>\r\n)\r\n\r\nAuthor.propTypes = {\r\n    children: PropTypes.string,\r\n  };\r\n\r\nexport default Author;","import React from 'react';\r\nimport { PropTypes } from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\nimport './PostSummary.scss';\r\n\r\nimport Button from '../../common/Button/Button';\r\nimport SmallTitle from '../../common/SmallTitle/SmallTitle';\r\nimport HtmlBox from '../../common/HtmlBox/HtmlBox';\r\n\r\nimport cutText from '../../../utils/cutText';\r\nimport Author from '../../common/Author/Author';\r\n\r\nconst PostSummary = ({ id, title, content, author }) => (\r\n  <article className=\"post-summary\">\r\n    <SmallTitle>{title}</SmallTitle>\r\n    <Author>{ author }</Author>\r\n    <HtmlBox>{ cutText(content, 50) }</HtmlBox>\r\n      <Link to = {`/posts/${id}`}>\r\n        <Button variant=\"primary\">\r\n          Read more\r\n        </Button>  \r\n      </Link>\r\n      <Link to = {`/posts/edit/${id}`}>\r\n        <Button variant=\"info\">\r\n          Edit Post\r\n        </Button>  \r\n      </Link>\r\n  </article>\r\n);\r\n\r\nPostSummary.propTypes = {\r\n  id: PropTypes.string,\r\n  title: PropTypes.string,\r\n  author: PropTypes.string,\r\n  content: PropTypes.string,\r\n};\r\n\r\nexport default PostSummary;","import React from 'react';\r\nimport { PropTypes } from 'prop-types';\r\n\r\nimport PostSummary from '../PostSummary/PostSummary';\r\n\r\nconst PostsList = ({ posts }) => (\r\n  <div>\r\n    <section className=\"posts-list\">\r\n      {posts.map(post => <PostSummary key={post.id} {...post} />)}\r\n    </section>\r\n  </div>\r\n);\r\n\r\nPostsList.propTypes = {\r\n  posts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      title: PropTypes.string.isRequired,\r\n      author: PropTypes.string.isRequired,\r\n      content: PropTypes.string.isRequired,\r\n    })\r\n  ),\r\n};\r\n\r\nexport default PostsList;\r\n","import React from 'react';\r\nimport { Animated } from 'react-animated-css';\r\n\r\nimport './Spinner.scss';\r\n\r\nconst Spinner = () => (\r\n  <Animated animationIn=\"fadeIn\" animationOut=\"fadeOut\">\r\n    <div className=\"lds-ellipsis\">\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n    </div>\r\n  </Animated>\r\n);\r\n\r\nexport default Spinner;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Animated } from 'react-animated-css';\r\nimport { MdInfoOutline, MdDone, MdErrorOutline } from 'react-icons/md';\r\n\r\nimport './Alert.scss';\r\n\r\nconst Alert = ({ variant = '', children, ...otherProps }) => {\r\n\r\n  const icon = () => {\r\n    switch(variant) {\r\n      case 'info':\r\n        return <MdInfoOutline />\r\n      case 'success':\r\n        return <MdDone />\r\n      case 'warning':\r\n        return <MdErrorOutline />\r\n      case 'error':\r\n        return <MdErrorOutline />\r\n      default:\r\n        return <MdInfoOutline />\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Animated animationIn=\"fadeIn\" animationOut=\"fadeOut\">\r\n      <div {...otherProps} className={`alert alert--${variant}`}>\r\n        {icon()}\r\n        <span className=\"alert__desc\">{children}</span>\r\n      </div>\r\n    </Animated>\r\n  )\r\n\r\n};\r\n\r\nAlert.propTypes = {\r\n  variant: PropTypes.string.isRequired,\r\n  children: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Alert;\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Pagination.scss';\r\nimport { IoIosArrowBack, IoIosArrowForward } from \"react-icons/io\";\r\n\r\nconst Pagination = (props) => {\r\n    const [presentPage, setPage] = useState(props.initialPage || 5);\r\n    const { pages, onPageChange } = props;\r\n\r\n    const changePage = (newPage) => {\r\n        setPage(newPage);\r\n        onPageChange(newPage);\r\n    }\r\n\r\n    const getNextPage = () => {\r\n        const nextPage = presentPage + 1;\r\n        setPage(nextPage);\r\n        onPageChange(nextPage);\r\n    }\r\n\r\n    const getPrevPage = () => {\r\n        const prevPage = presentPage - 1;\r\n        setPage(prevPage);\r\n        onPageChange(prevPage);\r\n    }\r\n\r\n    return (\r\n        <div className=\"pagination\">\r\n            <ul className=\"pagination__list\">\r\n                { presentPage > 1 && \r\n                    <li \r\n                        className=\"pagination__list__item\" \r\n                        onClick={() => getPrevPage()} >\r\n                        <IoIosArrowBack/>\r\n                    </li>\r\n                } \r\n                {[...Array(pages)].map((el, page) =>\r\n                <li\r\n                    key={++page}\r\n                    onClick={() => { changePage(page) }}\r\n                    className={`pagination__list__item${((page) === presentPage) ? ' pagination__list__item--active' : ''}`}>\r\n                    {page}\r\n                </li>\r\n                )}\r\n                {presentPage < pages && \r\n                <li \r\n                    className=\"pagination__list__item\"\r\n                    onClick={() => getNextPage()} >\r\n                    <IoIosArrowForward/>\r\n                </li>}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nPagination.propTypes = {\r\n    pages: PropTypes.number.isRequired,\r\n    initialPage: PropTypes.number,\r\n    onPageChange: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Pagination;","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { loadPostsByPageRequest } from '../../../redux/postsReducer';\r\n\r\nimport PostsList from '../PostsList/PostsList';\r\nimport Spinner from '../../common/Spinner/Spinner';\r\nimport Alert from '../../common/Alert/Alert';\r\nimport Pagination from '../../common/Pagination/Pagination';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Posts = (props) => {\r\n  const dispatch = useDispatch();\r\n  const posts = useSelector(({ posts }) => posts.data);\r\n  const request = useSelector(({ posts }) => posts.request );\r\n  const pages = useSelector(({ posts }) => Math.ceil(posts.amount / posts.postsPerPage));\r\n\r\n  const [ initialPage ] = useState(props.initialPage || 1);\r\n  const [ postsPerPage ] = useState(props.postsPerPage || 1);\r\n  const [ pagination, setPagination ] = useState(props.pagination);\r\n  \r\n  const loadPostsPage = (page) => {\r\n    dispatch(loadPostsByPageRequest(page, postsPerPage));  \r\n  }\r\n\r\n  useEffect(() => {\r\n    dispatch(loadPostsByPageRequest(initialPage, postsPerPage)); \r\n    if( props.pagination === undefined) setPagination(true); \r\n  },[]);\r\n\r\n    return (\r\n      <div>\r\n        { request.pending && request.success === null && <Spinner /> }\r\n        { !request.pending && request.error !== null && <Alert variant='error'>{ request.error }</Alert>}\r\n        { !request.pending && request.success && posts.length === 0 && <Alert variant='Info'>No Posts</Alert> }\r\n        { !request.pending && request.success && posts.length > 0 && <PostsList posts={posts} /> }\r\n        { pagination && <Pagination pages={pages} initialPage={initialPage} onPageChange={(page) => loadPostsPage(page) } />}\r\n      </div>\r\n    );\r\n};\r\n\r\nPosts.propTypes = {\r\n  initialPage: PropTypes.number,\r\n  postPerPage: PropTypes.number\r\n};\r\n\r\nexport default Posts;","import React from 'react';\r\nimport PageTitle from '../../common/PageTitle/PageTitle';\r\nimport Posts from '../../features/Posts/Posts';\r\n\r\nconst HomePage = () => (\r\n  <div>\r\n    <PageTitle>Blog</PageTitle>\r\n    <Posts postsPerPage={3} pagination={false} />\r\n  </div>\r\n);\r\n\r\nexport default HomePage;","import React from 'react';\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst PostsCounter = () => {\r\n  const count = useSelector(({ posts }) => posts.data.length);\r\n  \r\n  return (\r\n    <div>\r\n      Posts counter: \r\n      { count === 0 ? 'No posts' : count }  \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PostsCounter;","import React from 'react';\r\n\r\nimport PageTitle from '../../common/PageTitle/PageTitle';\r\nimport PostsCounter from '../../features/PostsCounter/PostsCounter';\r\nimport Posts from '../../features/Posts/Posts';\r\n\r\nconst PostsPage = () => {\r\n  return (\r\n    <div>\r\n      <PageTitle>Posts list</PageTitle>\r\n      <PostsCounter />\r\n      <Posts/>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default PostsPage;","import { useState } from 'react';\r\n\r\nconst useFormInput = initialValue => {  \r\n    const [value, setValue] = useState(initialValue);\r\n\r\n    const onChange = e => {\r\n      setValue(e.target.value);\r\n    };\r\n  \r\n    return {\r\n      value,\r\n      onChange\r\n    };\r\n    \r\n};\r\n\r\nexport default useFormInput;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './TextField.scss';\r\n\r\nconst TextField = ({ value, label, onChange, ...otherProps }) => (\r\n  <label className=\"text-field\">\r\n    <span className={`text-field__label ${(!value.length > 0) ? 'text-field__label--big' : ''}`}>{label}</span>\r\n    <input {...otherProps} value={value} onChange={onChange} className=\"text-field__input\" />\r\n  </label>\r\n);\r\n\r\nTextField.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  label: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default TextField;\r\n","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport useFormInput from '../../../utils/myHooks/useFormInput'; // import custom hook;\r\nimport './ContactEmail.scss';\r\n\r\n//Import Components\r\nimport TextField from '../../common/TextField/TextField';\r\nimport Button from '../../common/Button/Button';\r\nimport Alert from '../../common/Alert/Alert';\r\nimport Spinner from '../../common/Spinner/Spinner';\r\n\r\nimport { sendEmailRequest, resetRequest } from '../../../redux/postsReducer';\r\n\r\nconst ContactEmail = () => {\r\n    const dispatch = useDispatch();\r\n    const request = useSelector(({ posts }) => posts.request );\r\n    const address = useFormInput('');\r\n    const subject = useFormInput('');\r\n    const content = useFormInput('');\r\n\r\n    useEffect(() => {\r\n        dispatch(resetRequest());\r\n    },[]);\r\n\r\n    const sendEmail = (e) => {\r\n        e.preventDefault();\r\n\r\n        const email = {\r\n            address: address.value,\r\n            subject: subject.value,\r\n            content: content.value\r\n        } \r\n        dispatch(sendEmailRequest(email));\r\n    }\r\n    \r\n    if(request.success) return <Alert variant=\"success\">Post has been added!</Alert>\r\n    else if(request.pending) return <Spinner />\r\n    else return (\r\n        <form onSubmit={sendEmail}>\r\n        { request.error && <Alert variant=\"error\">{request.error}</Alert>}\r\n            <TextField\r\n                label=\"Your Email\"\r\n                type=\"email\"\r\n                {...address}\r\n                \r\n            />\r\n            <TextField\r\n                label=\"Subject\"\r\n                {...subject}\r\n            />\r\n\r\n            <textarea\r\n                className=\"message-field\"\r\n                placeholder=\"Write a message...\"\r\n                {...content}\r\n            />\r\n            <Button variant=\"primary\">Send Email</Button>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default ContactEmail;","import React from 'react';\r\nimport PageTitle from '../../common/PageTitle/PageTitle';\r\nimport ContactEmail from '../../features/ContactEmail/ContactEmail';\r\nconst ContactPage = () => (\r\n  <div>\r\n    <PageTitle>Contact</PageTitle>\r\n    <ContactEmail />\r\n  </div>\r\n);\r\n\r\nexport default ContactPage;","import React from 'react';\r\n\r\nconst NotFoundPage = () => (\r\n  <div>\r\n    <h1>404 Not Found</h1>\r\n  </div>\r\n);\r\n\r\nexport default NotFoundPage;","import React, { useState } from 'react';\r\nimport useFormInput from '../../../utils/myHooks/useFormInput'; // import custom hook\r\nimport './PostForm.scss';\r\n\r\n//Import Components\r\nimport TextField from '../../common/TextField/TextField';\r\nimport Button from '../../common/Button/Button';\r\n\r\n//Imports for Medium editor text\r\nimport Editor from 'react-medium-editor';\r\nimport 'medium-editor/dist/css/medium-editor.css';\r\nimport 'medium-editor/dist/css/themes/default.css';\r\n\r\n\r\nconst PostForm = ({title, author, content, handleSubmit}) => {\r\n    const postTitle = useFormInput(title || '');\r\n    const postAuthor = useFormInput(author || '');\r\n    const [text, setContent] = useState(content || '');\r\n\r\n    const handleEditor = (text) => {\r\n        setContent(text);\r\n    }\r\n\r\n    const setPostValue = () => {\r\n        const post = {\r\n            title: postTitle.value,\r\n            author: postAuthor.value,\r\n            content: text\r\n        } \r\n        handleSubmit(post);\r\n    } \r\n     \r\n    return (\r\n        <form onSubmit={setPostValue}>\r\n            <TextField\r\n                label=\"Title\"\r\n                {...postTitle}\r\n                \r\n            />\r\n            <TextField\r\n                label=\"Author\"\r\n                {...postAuthor}\r\n            />\r\n\r\n            <Editor\r\n                className=\"content-editor\"\r\n                text={text}\r\n                onChange={handleEditor}\r\n                options={{ placeholder: false, toolbar: { buttons: ['bold', 'italic', 'underline', 'anchor', 'h2', 'h3'] } }}\r\n            />\r\n            {handleSubmit.name === 'addPost' && <Button variant=\"primary\">Add post</Button>}\r\n            {handleSubmit.name === 'editPost' && <Button variant=\"primary\">Edit post</Button>}\r\n        </form>\r\n    );\r\n}\r\n\r\n\r\nexport default PostForm;","import React, {useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport PostForm from '../../common/PostForm/PostForm';\r\nimport Alert from '../../common/Alert/Alert';\r\nimport Spinner from '../../common/Spinner/Spinner';\r\n\r\n//Import Redux elements\r\nimport { addPostRequest, resetRequest } from '../../../redux/postsReducer';\r\n\r\n\r\nconst NewPost = () => {\r\n    //Hooks elements\r\n    const dispatch = useDispatch();\r\n    const request = useSelector(({ posts }) => posts.request );\r\n\r\n    const addPost = (post) => {\r\n        dispatch(addPostRequest(post));\r\n    }\r\n    \r\n    useEffect(() => {\r\n        dispatch(resetRequest());\r\n    },[]);\r\n    \r\n    if(request.error) return <Alert variant=\"error\">{request.error}</Alert>\r\n    else if(request.success) return <Alert variant=\"success\">Post has been added!</Alert>\r\n    else if(request.pending) return <Spinner />\r\n    else return (\r\n        <PostForm handleSubmit={addPost}/>\r\n    );\r\n};\r\n\r\nexport default NewPost;","import React from 'react';\r\nimport NewPost from '../../features/NewPost/NewPost';\r\nconst NewPostPage = () => (\r\n  <div>\r\n    <NewPost />\r\n  </div>\r\n);\r\n\r\nexport default NewPostPage;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { FacebookProvider, Comments, ShareButton } from 'react-facebook';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { BASE_URL, FACEBOOK_API_ID } from '../../../config';\r\nimport HtmlBox from '../HtmlBox/HtmlBox';\r\nimport Author from '../Author/Author';\r\nimport PageTitle from '../PageTitle/PageTitle';\r\n\r\nconst SinglePost = ({ title, author, content, ...props }) => {\r\n    const { location } = props;\r\n\r\n    return (\r\n        <div>\r\n            <FacebookProvider appId={FACEBOOK_API_ID}>\r\n                <PageTitle>{ title }</PageTitle>\r\n                <ShareButton className=\"button button--danger\" href={`${BASE_URL}${location.pathname}`}>\r\n                    Share\r\n                </ShareButton>\r\n                <Author>{ author }</Author>\r\n                <HtmlBox>{ content }</HtmlBox>\r\n                <Comments href={`${BASE_URL}${location.pathname}`}/>\r\n            </FacebookProvider>\r\n        </div>\r\n    );\r\n}\r\n\r\nSinglePost.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    author: PropTypes.string.isRequired,\r\n    content: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default withRouter(props => <SinglePost {...props}/>);","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { loadSinglePostRequest } from '../../../redux/postsReducer';\r\n\r\nimport Spinner from '../../common/Spinner/Spinner';\r\nimport Alert from '../../common/Alert/Alert';\r\nimport SinglePostForm from '../../common/SinglePostForm/SinglePostForm';\r\n\r\nconst SinglePost = ({ match }) => {\r\n    const dispatch = useDispatch();\r\n    const singlePost = useSelector(({ posts }) => posts.singlePost);\r\n    const request = useSelector(({ posts }) => posts.request); \r\n    const { title, author, content } = singlePost;\r\n    useEffect(() => {\r\n      dispatch(loadSinglePostRequest(match.params.id));\r\n    },[]);\r\n  \r\n    return (\r\n      <div>\r\n        { request.pending && request.success === null && <Spinner /> }\r\n        { !request.pending && request.success && \r\n          <SinglePostForm title={ title } author={ author } content={ content } />\r\n        }\r\n        { !request.pending && request.error !== null && <Alert variant='error'>{ request.error }</Alert>}\r\n      </div>\r\n    );\r\n  } \r\n  \r\n  export default SinglePost;","import React from 'react';\r\n\r\nimport SinglePost from '../../features/SinglePost/SinglePost';\r\n\r\nconst SinglePostPage = ({ match }) => {\r\n\r\n  return (\r\n    <SinglePost match= { match } />\r\n  );\r\n} \r\n\r\nexport default SinglePostPage;","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport PostForm from '../../common/PostForm/PostForm';\r\nimport Alert from '../../common/Alert/Alert';\r\nimport Spinner from '../../common/Spinner/Spinner';\r\n\r\n//Import Redux elements\r\nimport { editPostRequest, resetRequest, loadSinglePostRequest  } from '../../../redux/postsReducer';\r\n\r\n\r\nconst EditPost = ({match}) => {\r\n    //Hooks elements\r\n    const dispatch = useDispatch();\r\n    const post = useSelector(({ posts }) => posts.singlePost );\r\n    const request = useSelector(({ posts }) => posts.request );\r\n    const postID = match.params.id;\r\n\r\n    const editPost = (post) => {\r\n        dispatch(editPostRequest(post, postID ));\r\n    }\r\n    \r\n    useEffect(() => {\r\n        const fetchPost = async () => {\r\n            await dispatch(loadSinglePostRequest(postID));\r\n            dispatch(resetRequest());\r\n        }\r\n        fetchPost();\r\n    },[]);\r\n\r\n        if(request.error) return <Alert variant=\"error\">{request.error}</Alert>\r\n        else if(request.success) return <Alert variant=\"success\">Post has been edited!</Alert>\r\n        else if(request.pending) return <Spinner />\r\n        else return (\r\n            <PostForm {...post} handleSubmit={editPost}/>\r\n    );\r\n};\r\n\r\nexport default EditPost;","import React from 'react';\r\nimport EditPost from '../../features/EditPostForm/EditPostForm'\r\nconst EditPostPage = ({match}) => (\r\n  <div>\r\n    <EditPost match={match} />\r\n  </div>\r\n);\r\n\r\nexport default EditPostPage;","const getRandomInt = (min, max) => {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min)) + min;\r\n}\r\n\r\nexport default getRandomInt;","import React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport  getRandomInt from '../../../utils/getRandomInt';\r\nimport { getRandomPost } from '../../../redux/postsReducer';\r\nimport SinglePostForm from '../../common/SinglePostForm/SinglePostForm';\r\nimport Spinner from '../../common/Spinner/Spinner';\r\nimport Alert from '../../common/Alert/Alert';\r\n\r\nconst RandomPost = () => {\r\n    const dispatch = useDispatch();\r\n    const amount = useSelector(({posts}) => posts.amount);\r\n    const randomPost = useSelector(({posts}) => posts.randomPost);\r\n    const request = useSelector (({posts}) => posts.request);\r\n    const { title, author, content } = randomPost;\r\n\r\n    useEffect(() => {\r\n        const randomId = getRandomInt(0, amount);\r\n        dispatch(getRandomPost(randomId));\r\n      },[]);\r\n\r\n    return (\r\n        <div>\r\n            { request.pending && request.success === null && <Spinner /> }\r\n            { !request.pending && request.success && \r\n                <SinglePostForm title={ title } author={ author } content={ content } />\r\n            }\r\n            { !request.pending && request.error !== null && <Alert variant='error'>{ request.error }</Alert>}\r\n      </div>\r\n    );\r\n};\r\n\r\nexport default RandomPost;","import React from 'react';\r\n\r\nimport RandomPost from '../../features/RandomPost/RandomPost';\r\n\r\nconst RandomPostPage = () => {\r\n    return (\r\n        <RandomPost />\r\n    );\r\n};\r\n\r\nexport default RandomPostPage;","import React from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\n\r\nimport MainLayout from './components/layouts/MainLayout/MainLayout';\r\n//Import routes components\r\nimport Home from './components/pages/Home/Home';\r\nimport Posts from './components/pages/Posts/Posts';\r\nimport Contact from './components/pages/Contact/Contact';\r\nimport NotFound from './components/pages/NotFound/NotFound';\r\nimport NewPost from './components/pages/NewPost/NewPost';\r\nimport SinglePost from './components/pages/SinglePost/SinglePost';\r\nimport EditPost from './components/pages/EditPost/EditPost';\r\nimport RandomPost from './components/pages/RandomPost/RandomPost';\r\n\r\nconst App = () => {\r\n  return (\r\n    <MainLayout>\r\n      <Switch>\r\n        <Route path=\"/\" exact component={ Home } />\r\n        <Route path=\"/posts\" exact component={ Posts } />\r\n        <Route path=\"/posts/new\" exact component={ NewPost } />\r\n        <Route path=\"/posts/randomPost\" exact component={ RandomPost } />\r\n        <Route path=\"/posts/edit/:id\" exact component={ EditPost } />\r\n        <Route path=\"/posts/:id\" exact component={ SinglePost } />\r\n        <Route path=\"/contact\" exact component={ Contact } />\r\n        <Route component={ NotFound } />\r\n      </Switch>\r\n    </MainLayout>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { createStore, compose, applyMiddleware, combineReducers } from \"redux\";\r\nimport thunk from 'redux-thunk';\r\n\r\n// import reducers\r\nimport posts from './postsReducer';\r\n\r\n// combine reducers\r\nconst allReducers = combineReducers({\r\n    posts,\r\n});\r\n\r\n//CREATE STRORE\r\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose; \r\n\r\nconst store = createStore(allReducers, composeEnhancer(applyMiddleware(thunk)));\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './styles/global.scss';\r\nimport 'animate.css/animate.min.css';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\nimport { Provider } from 'react-redux';\r\nimport store from './redux/store';\r\n\r\nconst Root = () => (\r\n  <Provider store={store}>\r\n    <Router>\r\n      <App />\r\n    </Router>\r\n  </Provider>\r\n);\r\n\r\nReactDOM.render(<Root />, document.getElementById('root'));\r\n\r\n"],"sourceRoot":""}